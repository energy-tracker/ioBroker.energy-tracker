{
  "version": 3,
  "sources": ["../../src/lib/energy-tracker-api.spec.ts"],
  "sourcesContent": ["import { expect } from \"chai\";\nimport chai from \"chai\";\nimport sinonChai from \"sinon-chai\";\nimport sinon from \"sinon\";\nimport axios from \"axios\";\nimport { EnergyTrackerApi } from \"./energy-tracker-api\";\n\nchai.use(sinonChai);\n\ndescribe(\"EnergyTrackerApi\", () => {\n  let adapterMock: sinon.SinonStubbedInstance<ioBroker.Adapter>;\n  let axiosPostStub: sinon.SinonStub;\n  let api: EnergyTrackerApi;\n\n  beforeEach(() => {\n    adapterMock = {\n      getForeignStateAsync: sinon.stub(),\n      setState: sinon.stub().resolves(),\n      config: {\n        bearerToken: \"test-token\",\n      },\n      log: {\n        info: sinon.stub(),\n        warn: sinon.stub(),\n        error: sinon.stub(),\n      },\n    } as unknown as sinon.SinonStubbedInstance<ioBroker.Adapter>;\n\n    axiosPostStub = sinon.stub(axios, \"post\");\n    api = new EnergyTrackerApi(adapterMock);\n  });\n\n  afterEach(() => {\n    sinon.restore();\n  });\n\n  it(\"should send a valid reading (allowRounding=false)\", async () => {\n    // Arrange\n    const device = {\n      deviceId: \"abc123\",\n      sourceState: \"test.state\",\n      allowRounding: false,\n      sendIntervalHours: 1,\n    } satisfies ioBroker.AdapterDevice;\n    adapterMock.getForeignStateAsync.resolves({\n      val: 123.456,\n      ack: true,\n      ts: Date.now(),\n      lc: Date.now(),\n      from: \"system.adapter.test\",\n    });\n\n    // Act\n    await api.sendReading(device);\n\n    // Assert\n    expect(axiosPostStub.calledOnce).to.be.true;\n    const [url, body, config] = axiosPostStub.firstCall.args;\n    expect(url).to.include(\"/v1/devices/abc123/meter-readings\");\n    expect(body).to.deep.equal({ value: 123.456 });\n    expect(config.headers.Authorization).to.equal(\"Bearer test-token\");\n    expect(config.params).to.deep.equal({});\n    expect(adapterMock.log.info).to.have.been.calledWithMatch(\"[test.state] Reading sent: 123.456\");\n  });\n\n  it(\"should include allowRounding=true when enabled\", async () => {\n    // Arrange\n    const device = {\n      deviceId: \"round1\",\n      sourceState: \"round.state\",\n      allowRounding: true,\n      sendIntervalHours: 1,\n    } satisfies ioBroker.AdapterDevice;\n    adapterMock.getForeignStateAsync.resolves({\n      val: 123.789,\n      ack: true,\n      ts: Date.now(),\n      lc: Date.now(),\n      from: \"system.adapter.test\",\n    });\n\n    // Act\n    await api.sendReading(device);\n\n    // Assert\n    expect(axiosPostStub.firstCall.args[2].params).to.deep.equal({ allowRounding: true });\n  });\n\n  it(\"should warn on invalid state value\", async () => {\n    // Arrange\n    const device = {\n      deviceId: \"invalid1\",\n      sourceState: \"missing.state\",\n      allowRounding: false,\n      sendIntervalHours: 1,\n    } satisfies ioBroker.AdapterDevice;\n    adapterMock.getForeignStateAsync.resolves({\n      val: \"not-a-number\",\n      ack: true,\n      ts: 1,\n      lc: 1,\n      from: \"system.adapter.test\",\n    });\n\n    // Act\n    await api.sendReading(device);\n\n    // Assert\n    expect(adapterMock.log.warn).calledWithMatch(\"Invalid or missing state\");\n    expect(axiosPostStub.called).to.be.false;\n  });\n\n  it(\"should handle 400 Bad Request gracefully\", async () => {\n    // Arrange\n    const device = {\n      deviceId: \"fail400\",\n      sourceState: \"error.state\",\n      allowRounding: false,\n      sendIntervalHours: 1,\n    } satisfies ioBroker.AdapterDevice;\n    adapterMock.getForeignStateAsync.resolves({\n      val: 1,\n      ack: true,\n      ts: Date.now(),\n      lc: Date.now(),\n      from: \"system.adapter.test\",\n    });\n\n    axiosPostStub.rejects({\n      isAxiosError: true,\n      response: {\n        status: 400,\n        data: { message: \"Test bad request\" },\n      },\n    });\n\n    // Act\n    await api.sendReading(device);\n\n    // Assert\n    expect(adapterMock.log.warn).to.have.been.calledWithMatch(\n      \"[error.state] Bad Request: Test bad request\"\n    );\n  });\n});\n"],
  "mappings": "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",
  "names": ["import_chai", "chai", "sinonChai", "sinon", "axios"]
}
